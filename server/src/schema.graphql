scalar Void

enum ChatType {
  group
  private
}

type User {
  id: Int!
  email: String!
  login: String!
  password: String!
}

type Chat {
  id: Int!
  title: String
  type: ChatType!
  userCreated: User
  userCreatedId: Int!
}

type Message {
  sender: User!
  message: String!
  chat: Chat
  senderId: Int!
  chatId: Int!
  createdAt: String!
}

type ReturnUserWithAccessToken {
  user: User!
  accessToken: String!
}

type ChatInfo {
  chat: Chat!
  type: Int!
  messages: [Message]!
}

input RegisterUserInput {
  email: String!
  login: String!
  password: String!
}

input LoginInput {
  login: String!
  password: String!
}

input SendMessageInput {
  chatId: Int
  receiverId: Int
  message: String!
}

type Query {
  getUserData: User
  getChatsByUser: [Chat]
  getChatHistory: ChatInfo
}

type Mutation {
  register(user: RegisterUserInput!): ReturnUserWithAccessToken
  login(data: LoginInput!): ReturnUserWithAccessToken
  sendMessage(message: SendMessageInput!): Message
}

type Subscription {
  messageAdded: Message
}
